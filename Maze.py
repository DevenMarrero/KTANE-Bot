from Voice import speak

answer = []


def maze(info):
    a_maze = {
        '11': ['21', '12'],
        '21': ['11', '31'],
        '31': ['21', '32'],
        '41': ['42', '51'],
        '51': ['41', '61'],
        '61': ['51'],
        '12': ['11', '13'],
        '22': ['32', '23'],
        '32': ['22', '31'],
        '42': ['41', '52'],
        '52': ['42', '62'],
        '62': ['52', '63'],
        '13': ['12', '14'],
        '23': ['22', '33'],
        '33': ['23', '34'],
        '43': ['44', '53'],
        '53': ['43', '63'],
        '63': ['53', '62', '64'],
        '14': ['13', '15'],
        '24': ['34'],
        '34': ['24', '33', '44'],
        '44': ['34', '43'],
        '54': ['64'],
        '64': ['54', '63', '65'],
        '15': ['14', '25', '16'],
        '25': ['15', '35'],
        '35': ['25', '36'],
        '45': ['46', '55'],
        '55': ['45'],
        '65': ['64', '66'],
        '16': ['15', '26'],
        '26': ['16'],
        '36': ['35', '46'],
        '46': ['36', '45'],
        '56': ['66'],
        '66': ['56', '65']

        # 11  21 31 | 41 51 61
        #    --          -----
        # 12 |22 32 | 42 52 62
        #       -----------
        # 13 |23 33 | 43 53 63
        #     --        --
        # 14 |24 34  44 |54 64
        #    ---------------
        # 15 25 35 | 45 55 |65
        #    --         ---|
        # 16 26 |36  46 |56 66
    }

    b_maze = {
        '11': ['21'],
        '21': ['11', '31', '22'],
        '31': ['21'],
        '41': ['42', '51'],
        '51': ['41', '61', '52'],
        '61': ['51'],
        '12': ['22', '13'],
        '22': ['12', '21'],
        '32': ['33', '42'],
        '42': ['41', '32'],
        '52': ['51', '62'],
        '62': ['52', '63'],
        '13': ['12', '14'],
        '23': ['24', '33'],
        '33': ['23', '32'],
        '43': ['44', '53'],
        '53': ['43', '63'],
        '63': ['53', '62', '64'],
        '14': ['13', '15', '24'],
        '24': ['14', '23'],
        '34': ['35', '44'],
        '44': ['34', '43'],
        '54': ['55'],
        '64': ['63', '65'],
        '15': ['14', '16'],
        '25': ['26'],
        '35': ['34', '36'],
        '45': ['46', '55'],
        '55': ['45', '54'],
        '65': ['64', '66'],
        '16': ['15'],
        '26': ['25', '36'],
        '36': ['35', '26'],
        '46': ['56', '45'],
        '56': ['66', '46'],
        '66': ['56', '65']

    }

    c_maze = {
        '11': ['21', '12'],
        '21': ['11', '31'],
        '31': ['21', '32'],
        '41': ['42'],
        '51': ['61', '52'],
        '61': ['51', '62'],
        '12': ['11'],
        '22': ['23'],
        '32': ['33', '31'],
        '42': ['41', '52'],
        '52': ['51', '42'],
        '62': ['61', '63'],
        '13': ['23', '14'],
        '23': ['24', '21', '13'],
        '33': ['34', '32'],
        '43': ['44', '53'],
        '53': ['43', '54'],
        '63': ['62', '64'],
        '14': ['13', '15'],
        '24': ['25', '23'],
        '34': ['35', '33'],
        '44': ['45', '43'],
        '54': ['55', '53'],
        '64': ['63', '65'],
        '15': ['14', '16'],
        '25': ['24', '35'],
        '35': ['34', '25'],
        '45': ['46', '44'],
        '55': ['56', '54'],
        '65': ['64', '66'],
        '16': ['15', '26'],
        '26': ['16', '36'],
        '36': ['46', '26'],
        '46': ['36', '45'],
        '56': ['66', '54'],
        '66': ['56', '65']

    }

    d_maze = {
        '11': ['21', '12'],
        '21': ['11', '22'],
        '31': ['41'],
        '41': ['31', '51'],
        '51': ['61', '41'],
        '61': ['51', '62'],
        '12': ['11', '13'],
        '22': ['23', '21'],
        '32': ['33', '42'],
        '42': ['32', '52'],
        '52': ['62', '42'],
        '62': ['61', '63', '52'],
        '13': ['12', '14'],
        '23': ['22', '33'],
        '33': ['23', '32'],
        '43': ['44', '53'],
        '53': ['43'],
        '63': ['62', '64'],
        '14': ['13', '15'],
        '24': ['34'],
        '34': ['24', '44'],
        '44': ['34', '43', '54'],
        '54': ['44', '34'],
        '64': ['63', '65', '54'],
        '15': ['14', '16', '25'],
        '25': ['15', '35'],
        '35': ['45', '25'],
        '45': ['35', '55'],
        '55': ['56', '45'],
        '65': ['64', '66'],
        '16': ['15', '26'],
        '26': ['16', '36'],
        '36': ['26'],
        '46': ['56'],
        '56': ['46', '55'],
        '66': ['65']

    }

    e_maze = {
        '11': ['21'],
        '21': ['11', '31'],
        '31': ['41', '21'],
        '41': ['31', '51'],
        '51': ['61', '41', '52'],
        '61': ['51', '62'],
        '12': ['22', '13'],
        '22': ['12', '32'],
        '32': ['22', '42'],
        '42': ['32', '52', '43'],
        '52': ['51', '42'],
        '62': ['61'],
        '13': ['12', '14', '23'],
        '23': ['13', '24'],
        '33': ['43'],
        '43': ['33', '42'],
        '53': ['63', '54'],
        '63': ['53', '64'],
        '14': ['13', '15'],
        '24': ['34', '23'],
        '34': ['24', '44'],
        '44': ['34', '45'],
        '54': ['53'],
        '64': ['63', '65'],
        '15': ['14', '16'],
        '25': ['26', '35'],
        '35': ['45', '25'],
        '45': ['35', '55', '44'],
        '55': ['45'],
        '65': ['64', '66'],
        '16': ['15'],
        '26': ['25', '36'],
        '36': ['26', '46'],
        '46': ['56', '36'],
        '56': ['46', '66'],
        '66': ['65', '56']

    }

    f_maze = {
        '11': ['12'],
        '21': ['22', '31'],
        '31': ['32', '21'],
        '41': ['51'],
        '51': ['61', '41', '52'],
        '61': ['51', '62'],
        '12': ['11', '13'],
        '22': ['21', '23'],
        '32': ['31', '33'],
        '42': ['52', '43'],
        '52': ['51', '42'],
        '62': ['61', '63'],
        '13': ['12', '14', '23'],
        '23': ['13', '22'],
        '33': ['32'],
        '43': ['44', '42'],
        '53': ['63', '54'],
        '63': ['53', '62'],
        '14': ['13', '24'],
        '24': ['14', '25'],
        '34': ['35', '44'],
        '44': ['34', '45', '43'],
        '54': ['53', '55'],
        '64': ['65'],
        '15': ['25', '16'],
        '25': ['24', '15'],
        '35': ['34'],
        '45': ['46', '44'],
        '55': ['54', '65'],
        '65': ['64', '66', '55'],
        '16': ['15', '26'],
        '26': ['16', '36'],
        '36': ['26', '46'],
        '46': ['45', '36'],
        '56': ['66'],
        '66': ['65', '56']

    }

    g_maze = {
        '11': ['12', '21'],
        '21': ['11', '31'],
        '31': ['41', '21'],
        '41': ['31', '42'],
        '51': ['61', '52'],
        '61': ['51', '62'],
        '12': ['11', '13'],
        '22': ['32', '23'],
        '32': ['22'],
        '42': ['52', '41'],
        '52': ['51', '42'],
        '62': ['61', '63'],
        '13': ['12', '23'],
        '23': ['13', '22'],
        '33': ['34', '43'],
        '43': ['33'],
        '53': ['63', '54'],
        '63': ['53', '62'],
        '14': ['15', '24'],
        '24': ['14', '25'],
        '34': ['35', '44', '33'],
        '44': ['34', '54'],
        '54': ['53', '44'],
        '64': ['65'],
        '15': ['14', '16'],
        '25': ['24'],
        '35': ['34', '45'],
        '45': ['35', '55'],
        '55': ['45', '56'],
        '65': ['64', '66'],
        '16': ['15', '26'],
        '26': ['16', '36'],
        '36': ['26', '46'],
        '46': ['56', '36'],
        '56': ['66', '46', '55'],
        '66': ['65', '56']

    }

    h_maze = {
        '11': ['12'],
        '21': ['22', '31'],
        '31': ['41', '21'],
        '41': ['31', '42'],
        '51': ['61', '52'],
        '61': ['51', '62'],
        '12': ['11', '13', '22'],
        '22': ['32', '21', '12'],
        '32': ['22'],
        '42': ['52', '41'],
        '52': ['51', '42'],
        '62': ['61', '63'],
        '13': ['12', '14'],
        '23': ['24', '33'],
        '33': ['23', '43'],
        '43': ['33', '53'],
        '53': ['43', '54'],
        '63': ['64', '62'],
        '14': ['15', '16'],
        '24': ['23', '34'],
        '34': ['35', '24'],
        '44': ['54'],
        '54': ['52', '44', '64'],
        '64': ['63', '54'],
        '15': ['14', '16'],
        '25': ['26'],
        '35': ['34', '45'],
        '45': ['35', '55'],
        '55': ['45', '56'],
        '65': ['55'],
        '16': ['15', '26'],
        '26': ['16', '36', '25'],
        '36': ['26', '46'],
        '46': ['56', '36'],
        '56': ['66', '46'],
        '66': ['56']

    }

    i_maze = {
        '11': ['12'],
        '21': ['22', '31'],
        '31': ['41', '21'],
        '41': ['31', '42'],
        '51': ['61', '52', '41'],
        '61': ['51', '62'],
        '12': ['11', '13'],
        '22': ['23', '21'],
        '32': ['42', '33'],
        '42': ['32'],
        '52': ['51', '53'],
        '62': ['61', '63'],
        '13': ['12', '14', '23'],
        '23': ['22', '33', '13'],
        '33': ['23', '32'],
        '43': ['44', '53'],
        '53': ['43', '52'],
        '63': ['64', '62'],
        '14': ['15', '16'],
        '24': ['25'],
        '34': ['35', '44'],
        '44': ['43', '34'],
        '54': ['64'],
        '64': ['63', '54', '65'],
        '15': ['14', '16'],
        '25': ['26', '24'],
        '35': ['34', '36'],
        '45': ['46', '55'],
        '55': ['45', '56'],
        '65': ['64'],
        '16': ['15', '26'],
        '26': ['16', '25'],
        '36': ['35', '46'],
        '46': ['56', '45'],
        '56': ['66', '55'],
        '66': ['56']

    }

    info = info.replace(' ', '').replace('-', '')
    sinfo = info.split("next")
    ssinfo = []
    for word in sinfo:
        word = word.replace('to', '2').replace('three', '3').replace('four', '4').replace('for', '4')\
            .replace('five', '5').replace('six', '6').replace('two', '2').replace('one', '1').replace('0', '')\
            .replace('zero', '')
        ssinfo.append(word)
    try:
        fmaze, player, finish = ssinfo
    except ValueError:
        speak('Not enough coordinates')
        return

    if fmaze == '12' or fmaze == '63':
        maze = a_maze

    elif fmaze == '24' or fmaze == '52':
        maze = b_maze

    elif fmaze == '44' or fmaze == '64':
        maze = c_maze

    elif fmaze == '11' or fmaze == '14':
        maze = d_maze

    elif fmaze == '53' or fmaze == '46':
        maze = e_maze

    elif fmaze == '51' or fmaze == '35':
        maze = f_maze

    elif fmaze == '21' or fmaze == '26':
        maze = g_maze

    elif fmaze == '41' or fmaze == '34':
        maze = h_maze

    elif fmaze == '32' or fmaze == '15':
        maze = i_maze

    else:
        speak('That is Not a Maze')
        return

    # finds shortest path between 2 nodes of a graph using BFS
    def bfs_shortest_path(smaze, start, goal):
        # keep track of explored nodes
        explored = []
        # keep track of all the paths to be checked
        queue = [[start]]

        # return path if start is goal
        if start == goal:
            speak("That was easy! Start = goal")

        # keeps looping until all possible paths have been checked
        while queue:
            # pop the first path from the queue
            path = queue.pop(0)
            # get the last node from the path
            node = path[-1]
            if node not in explored:
                neighbours = smaze[node]
                # go through all neighbour nodes, construct a new path and
                # push it into the queue
                for neighbour in neighbours:
                    new_path = list(path)
                    new_path.append(neighbour)
                    queue.append(new_path)
                    # return path if neighbour is goal
                    if neighbour == goal:
                        global msolution
                        # print(new_path)
                        msolution = new_path
                        return new_path

                # mark node as explored
                explored.append(node)

        # in case there's no path between the 2 nodes
        speak("A connecting path doesn't exist")
        return "So sorry, but a connecting path doesn't exist"

    try:
        bfs_shortest_path(maze, player, finish)
        mazetranslate()
    except UnboundLocalError:
        return


def mazetranslate():
    global answer
    mzsolution = msolution

    last = mzsolution[0]
    mzsolution.remove(str(last))

    for character in mzsolution:
        if last[0] < character[0]:
            answer.append('right,')
        elif last[0] > character[0]:
            answer.append('left,')

        elif last[1] < character[1]:
            answer.append('down,')
        else:
            answer.append('up,')
        last = character

    janswer = ' '.join([str(elem) for elem in answer])
    speak(janswer)
    print(janswer)
